import dbConnect from '../../util/dbConnect';
import Restaurants from '../../models/Restaurants';

export default async function handler(req, res) {
  const { method, query } = req;
  let limit,
    skip = 0;
  if (query.limit) {
    limit = parseInt(query.limit);
    delete query.limit;
  }
  if (query.skip) {
    skip = parseInt(query.skip);
    delete query.skip;
  }
  if (query.grade) {
    const { grade } = query;
    delete query.grade;
    if (typeof query.grade === 'object') {
      query.grades.$elemMatch = { grade };
    } else {
      query.grades = { $elemMatch: { grade } };
    }
  }

  if (true) {
    query['address.coord'] = {
      $geoWithin: {
        $geometry: {
          coordinates: [
            [
              [-73.94933170560954, 40.78519312655759],
              [-73.94982390409011, 40.78451557104566],
              [-73.95028254920818, 40.78389046999264],
              [-73.95073913807909, 40.78326171027431],
              [-73.95119927339022, 40.78263339296121],
              [-73.95165920749085, 40.78200767416535],
              [-73.95212203271687, 40.781386710220794],
              [-73.95257421938265, 40.780753034022965],
              [-73.95303367951709, 40.78012545503866],
              [-73.95349212383219, 40.779496622676206],
              [-73.9539837022136, 40.77882211062083],
              [-73.95448224114962, 40.778138665021665],
              [-73.95494520074166, 40.77750394666421],
              [-73.95540729761609, 40.77686847989678],
              [-73.9558693368217, 40.77623622584272],
              [-73.9563349232549, 40.77560078338051],
              [-73.95679749082419, 40.77496631066816],
              [-73.9572941004381, 40.77428355507528],
              [-73.95779380470225, 40.77359989745676],
              [-73.95825534937201, 40.77296533708616],
              [-73.9587170744176, 40.772331674653884],
              [-73.9591818003835, 40.771696823955956],
              [-73.95964440773943, 40.77106426585257],
              [-73.96010955196542, 40.770432210965396],
              [-73.96060180637528, 40.76974918670642],
              [-73.96110997058013, 40.769064407802645],
              [-73.96154785518009, 40.768431581849335],
              [-73.96201413119697, 40.767812308995516],
              [-73.96246998928183, 40.76718493378781],
              [-73.96292865765733, 40.76655862794678],
              [-73.9634015408366, 40.7659111915375],
              [-73.96384291091124, 40.765309685670125],
              [-73.96429790392926, 40.764681987620484],
              [-73.96475544914023, 40.76405707059966],
              [-73.96521327987914, 40.76343135906083],
              [-73.96566959883926, 40.76280455611169],
              [-73.96612747295727, 40.76217929969561],
              [-73.96658338422259, 40.76155093557654],
              [-73.96818687803611, 40.76222682132588],
              [-73.96968801164819, 40.76286596244066],
              [-73.96980028891733, 40.7629135126304],
              [-73.96990489278997, 40.76295804272884],
              [-73.9714114162371, 40.76358747419966],
              [-73.9730148724222, 40.76427887944534],
              [-73.97255352295763, 40.76489773172334],
              [-73.97209852444364, 40.76551725122751],
              [-73.97164774334318, 40.76614246847269],
              [-73.97118520979589, 40.76677029017236],
              [-73.97072777348474, 40.76739372291856],
              [-73.97028165436166, 40.7680250324295],
              [-73.96982455287815, 40.76864600882082],
              [-73.96936484612665, 40.76927065682309],
              [-73.96890454710338, 40.7699008317911],
              [-73.96844155933383, 40.77051632687302],
              [-73.96799327777012, 40.77114723095265],
              [-73.96753398378264, 40.77177618398382],
              [-73.9670394757995, 40.7724612188164],
              [-73.96653617013204, 40.77314036859019],
              [-73.96607449041004, 40.77377298910013],
              [-73.96560968621522, 40.77440720144541],
              [-73.96514745374779, 40.77504423208974],
              [-73.9646873584175, 40.77567708171536],
              [-73.96422820174044, 40.776310309182556],
              [-73.96376123785119, 40.77695096943202],
              [-73.96372602674168, 40.77700571789988],
              [-73.96322991911045, 40.777677047361856],
              [-73.9627671555966, 40.778313040888705],
              [-73.96230361413733, 40.77894704120459],
              [-73.96183836905851, 40.77958419219622],
              [-73.9613687269495, 40.78022974904758],
              [-73.96091016072192, 40.78085703602665],
              [-73.96041430653959, 40.781524267804876],
              [-73.95992094286149, 40.78221294450745],
              [-73.95946905991516, 40.78283332166444],
              [-73.95900363247571, 40.78346729003609],
              [-73.95856810077622, 40.784083444542496],
              [-73.95809563777439, 40.7847174620527],
              [-73.95763599389798, 40.78534345832381],
              [-73.9571685368006, 40.78598289353274],
              [-73.95671863064372, 40.78660079382458],
              [-73.95626130919653, 40.78722287627986],
              [-73.95577735912323, 40.78791392447104],
              [-73.9541638308061, 40.787226861104834],
              [-73.95266136728186, 40.786595019624386],
              [-73.9525514553516, 40.78654858066242],
              [-73.95244615070386, 40.786502485582865],
              [-73.95092812788218, 40.78586538067524],
              [-73.95033804130387, 40.785617150013124],
              [-73.94933170560954, 40.78519312655759],
            ],
          ],
          type: 'Polygon',
        },
      },
    };
  }

  console.log(query);

  await dbConnect();

  switch (method) {
    case 'GET':
      const pipeline = [
        {
          $match: query,
        },
        {
          $facet: {
            data: [
              {
                $skip: skip,
              },
              {
                $limit: limit,
              },
            ],
            totalCount: [
              {
                $count: 'count',
              },
            ],
          },
        },
      ];

      const results = await Restaurants.aggregate(pipeline);

      const { data, totalCount } = results[0];

      const count = totalCount[0]?.count || 0;

      res.status(200).json({ success: true, data, totalCount: count });
      break;
    case 'POST':
      const newRestaurant = await Restaurants.create({
        ...req.body,
      });
      res.status(201).json({ success: true, data: newRestaurant });
      break;
    default:
      res.status(400).json({ success: false });
      break;
  }
}
